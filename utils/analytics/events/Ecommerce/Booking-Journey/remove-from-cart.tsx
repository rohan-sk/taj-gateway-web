import { triggerEvent } from "../../.."
import { getCookie } from "../../../../cookie"

export const handleRemoveFromCart = (
  childItem: any,
  index: number,
  dataLayer: any,
  hotelDataLayer: any,
  Cart: any,
  bookingFlowGlobalStore: any,
  BookingFlowPageStore: any,
  codes: any,
  getItem: any,
  bookingError: boolean,
  address: any,
  eventName: string,
) => {
  const presentDate = new Date()
  const checkInDate = new Date(childItem?.checkIn)
  const checkOutDate = new Date(childItem?.checkOut)
  let tab = getItem("activeTabName")
  !bookingError &&
    triggerEvent({
      action: eventName,
      params: {
        event: eventName,
        ...dataLayer,
        ...hotelDataLayer,
        eventTicketsQty: "",
        eventDate: "",
        offerName: "",
        offerCode: "",
        offerID: "",
        offerCategory: "",
        offerValidity: "",
        datesToBook: Math?.ceil((checkInDate?.getTime() - presentDate?.getTime()) / 86400000) || "",
        arrivalDate: childItem?.checkIn,
        departureDate: childItem?.checkOut,
        noOfRooms: childItem?.roomNumber,
        clientId: getCookie("_ga")?.slice(6),
        visitSource: "",
        brandName: hotelDataLayer?.hotelBrand || "",
        link_url: "",
        noOfAdults: childItem?.adult,
        noOfChild: childItem?.children,
        totalNoOfGuests: childItem?.adult + childItem?.children,
        widget_title: Cart?.title,
        widget_description: "",
        widget_type: "",
        widget_position: "",
        outbound: "",
        eventType: "",
        eventName: "",
        eventPlace: "",
        giftCardCategory: "",
        giftCardType: "",
        giftCardValue: "",
        giftCardQuantity: "",
        redemptionType: "",
        redemptionName: "",
        redemptionDescription: "",
        pointsType: "",
        location: "",
        pointstobeRedeemed: "",
        bookingType: "",
        bookingPaymentType: "",
        paymentType: "",
        buttonLinkName: Cart?.ctaLabel,
        link_text: Cart?.ctaLabel,
        userState: address?.state ? address?.state : "",
        userCity: address?.cityTown ? address?.cityTown : "",
        userPinCode: address?.pinCode ? address?.pinCode : "",
        ecommerce: {
          value: childItem?.cost || "",
          currency: childItem?.currency || "",
          items: {
            item_id: `${bookingFlowGlobalStore?.analyticsHotelBookingData?.synxisHotelId}_${childItem?.roomName}_${childItem?.packageName}`,
            item_name: childItem?.roomName,
            affiliation: hotelDataLayer?.hotelBrand || "",
            discount: "",
            index: index,
            item_brand: hotelDataLayer?.hotelName,
            item_category: BookingFlowPageStore?.selectedRoomType?.[index],
            item_category2: childItem?.packageName,
            item_category3: BookingFlowPageStore?.selectedRoomPrice?.[index],
            item_category4: dataLayer?.membershipType,
            item_category5: hotelDataLayer?.hotelCity,
            price: childItem?.cost || "",
            quantity: 1,
            promotion_name: "",
            promotion_id: "",
            coupon: tab === "Promotions" ? codes?.title : "",
            room_nights: Math?.ceil((checkOutDate?.getTime() - checkInDate?.getTime()) / 86400000) || "",
          },
        },
      },
    })
}
